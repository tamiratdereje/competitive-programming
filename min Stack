class MinStack(object):

    def __init__(self):
        self.minStack = []
        self.listOfMin = []

    def push(self, val):
        """
        :type val: int
        :rtype: None
        """
        
        if self.isEmpty():
            
            self.minStack.append(val)
            self.listOfMin.append(val)
        
        elif val <= self.listOfMin[-1]:
            self.listOfMin.append(val)
            self.minStack.append(val)
        else:
            self.minStack.append(val)
            

    def pop(self):
        """
        :rtype: None
        """
        if self.minStack[-1] == self.listOfMin[-1] and self.isEmpty()==False:
            self.listOfMin.pop()
            self.minStack.pop()
        
        else:
            self.minStack.pop()
        

    def top(self):
        """
        :rtype: int
        """
        return self.minStack[-1]
        

    def getMin(self):
        """
        :rtype: int
        """
        # if len(self.listOfMin)!=0:
        return self.listOfMin[-1]

    
    def isEmpty(self):
        if len(self.minStack)==0:
            return True
        else:
            return False


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
